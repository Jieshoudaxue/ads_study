按照十步学习法学习 autoware：

1 第一部分 只做一次
1.1 了解全局
（1）autoware：是最早的自动驾驶开源项目（比 apollo 更早），由名古屋大学加藤伸平教授于2015年8月创建，并创建 Autoware 基金会进行维护。2015年12月下旬，加藤伸平教授还创立了Tier IV，目标是将Autoware应用于真正的自动驾驶汽车上。
（2）autoware 使用 ros 作为中间件，与 ros 深度绑定，并先后出过几个版本：基于ROS 1的AutoWare.ai（2022年停更），基于ROS2的AutoWare.auto，后来更进一步升级为 Autoware.core/universe。目前 autoware 主推 .core/.universe 版本。
（3）目前，autoware 在自动驾驶领域与 apollo 齐名，是最流行的两种开源智驾框架，国外 autoware 更火一些。相比 apollo，autoware 更精简，并且由于与 ros 绑定，更容易上手。
（4）autoware 本身是一套完整的自动驾驶体系，包括传感器，感知，定制，规控，高清地图等等算法模块， 也能与 carla（支持ros） 和 LGsvl 两款仿真软件联合仿真，自身也有 AVP（代课泊车）和 cargo （机场物流小车）demo，可以说 autoware 既是理解自动驾驶知识最好的模板，也是锻炼实际工程能力的良好载体。

1.2 和 1.3 确定范围和定义目标
（1）学习最新的 autoware.core/universe，跑通 autoware.universe 的几个 demo，理解智驾数据流。理解 autoware 各个算法模块的代码框架，能基本掌握原理和代码，并能初步对应起来，但不强求精通。
（2）掌握 carla 和 lgsvl 仿真测试知识，会与 autoware 联合仿真。能在仿真环境下对算法进行调试，感受各个算法模块的差别。

1.4 寻找资源
官网传送门: 
    https://www.autoware.org/

autoware github官方主页：
    https://github.com/autowarefoundation/autoware

autoware github官方文档： 
    https://autowarefoundation.github.io/autoware-documentation/main/
autoware 老的gitlab文档地址（2022年以后，autoware搬到github了）
    https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/

autoware youtube官方主页：
    https://www.youtube.com/@autowarefoundation

autoware官方视频网站，资料：
    https://www.apex.ai/autoware-course
    https://www.youtube.com/watch?v=XTmlhvlmcf8&list=PLL57Sz4fhxLpCXgN0lvCF7aHAlRA5FoFr
    B站中文翻译版（同youtube）：https://www.bilibili.com/video/BV16p4y1Y7jb/?spm_id_from=333.337.search-card.all.click&vd_source=070cf712cbaef234201f1602115617d7
    https://gitlab.com/ApexAI/autowareclass2020

autoware 的昨天今天明天：
    https://autoware.org/past-present-and-the-future-of-autoware/
    https://autowarefoundation.github.io/autoware-documentation/main/design/autoware-concepts/difference-from-ai-and-auto/

autoware 公告区：
    https://discourse.ros.org/c/autoware/46
autoware 讨论区：
    https://github.com/orgs/autowarefoundation/discussions
autoware 项目区：
    https://github.com/orgs/autowarefoundation/projects?query=is%3Aopen

autoware.ai github主页（2022年停更，目前只读）：
    https://github.com/autowarefoundation/autoware_ai
autoware官方学习仓库：
    https://github.com/tier4/AutowareArchitectureProposal.proj?tab=readme-ov-file

博客资料：
    Autoware 软件开发指南（.ai，非常详细，高质量）：https://github.com/cyhasuka/Autoware-Manuals-Chinese?tab=readme-ov-file#jump4.0
    autoware.auto框架介绍：https://fishros.org.cn/forum/topic/299/autoware-auto%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D
    Autoware.Auto教程：http://lib.uml.com.cn/ebook/Autoware.Auto/Autoware955.asp
    Autoware.auto的安装、配置与测试（Docker版）https://www.guyuehome.com/37552


国内的讲解资料（概况）：
    Autoware_ROS2发展环境课程介绍01: https://blog.csdn.net/qq_37464479/article/details/117729715  
    自动驾驶开源项目Autoware.Auto介绍（重点）：https://www.bilibili.com/video/BV1fb4y1B7Zm/?spm_id_from=333.337.search-card.all.click&vd_source=070cf712cbaef234201f1602115617d7

    
国内的教学资料：
    【全新】自动驾驶框架Autoware源码解析与项目实战（天宇，autoware.ai，付费）：https://cvlife.net/p/t_pc/goods_pc_detail/goods_detail/course_2ZpeirG04cDayEqoY30IPztaBJZ
    Autoware全系列仿真操作指南（只讲解环境搭建，涉及三个版本的autoware，付费）：https://www.bilibili.com/cheese/play/ep487877?query_from=0&search_id=16955594302639449062&search_query=autoware&csource=common_hpsearch_null_null&spm_id_from=333.337.search-card.all.click 


资料思路调整：我要学习的是 autoware.universe，因此不能以老的 autoware.auto 的视频资料为主，应该以 autoware.universe 的文档和代码资料为主
    第一，核心资料四个，
        一是 autoware.universe github：https://github.com/autowarefoundation/autoware 
                                       https://github.com/autowarefoundation/autoware.core 
                                       https://github.com/autowarefoundation/autoware.universe
        二是 autoware doc：https://autowarefoundation.github.io/autoware-documentation/main/ 
        三是 autoware.universe doc ： https://autowarefoundation.github.io/autoware.universe/main/ 
        四是 autoware tools doc: https://autowarefoundation.github.io/autoware_tools/main/
    
    第二，次一点的资料：autoware.universe 视频：https://www.youtube.com/watch?v=xbLBJRSYybY&list=PLuCQPvHJs-PsdRduUGJxPq_FwF63FlB3a   
    
    第二，其他资料，主要是老版本 autoware 的资料：
        youtube autoware.auto 的视频：https://www.youtube.com/playlist?list=PLL57Sz4fhxLpCXgN0lvCF7aHAlRA5FoFr 
        视频对应的文档：https://gitlab.com/ApexAI/autowareclass2020/-/tree/master/lectures?ref_type=heads 
        
        autoware.auto 老的文档：https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/
        国内的翻译版：http://lib.uml.com.cn/ebook/Autoware.Auto/Autoware955.asp
        autoware.auto框架介绍：https://fishros.org.cn/forum/topic/299/autoware-auto%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D
        
        国内 autoware.ai 总结资料：https://github.com/cyhasuka/Autoware-Manuals-Chinese?tab=readme-ov-file#jump4.0
        国内 autoware.ai 卖课资料（可以借鉴目录）：https://cvlife.net/p/t_pc/goods_pc_detail/goods_detail/course_2ZpeirG04cDayEqoY30IPztaBJZ


    
1.5和1.6 创建学习计划和筛选资料
（1）autoware 引入，智驾技术架构介绍，源码安装，智驾安全性介绍，智驾实时性讨论
    https://autowarefoundation.github.io/autoware-documentation/main/
    https://github.com/autowarefoundation/autoware 
    https://autowarefoundation.github.io/autoware-documentation/main/design/autoware-concepts/
    https://autowarefoundation.github.io/autoware-documentation/main/design/autoware-concepts/difference-from-ai-and-auto/
    https://autowarefoundation.github.io/autoware-documentation/main/design/autoware-architecture/

    https://autowarefoundation.github.io/autoware-documentation/main/installation/

（2）autoware.universe 仿真测试

    https://autowarefoundation.github.io/autoware-documentation/main/tutorials/

    Autoware.Universe：如何在Carla 0.9.13上运行:
    https://www.bilibili.com/read/cv19814487/

    CARLA - Autoware universe Tutorial 2:
    https://www.youtube.com/watch?v=dxwwNacez7o
    https://www.youtube.com/watch?v=dxwwNacez7o


（3）开发自己的 autoware.universe，并使用 awsim 进行仿真
    https://autowarefoundation.github.io/autoware-documentation/main/how-to-guides/
    https://tier4.github.io/AWSIM/
    
（4）autoware.universe 各模块的架构和接口设计：传感器，地图，定位，感知，规划，控制，车辆
    https://autowarefoundation.github.io/autoware-documentation/main/design/
    https://autowarefoundation.github.io/autoware-documentation/main/design/autoware-architecture/node-diagram/
    https://autowarefoundation.github.io/autoware.universe/main/ 

    autoware.universe源码略读： https://blog.csdn.net/weixin_45432823/category_12681689.html



2 第二部分--在各个知识模块循环往复

2.1 autoware 引入，智驾技术架构介绍，智驾安全性介绍，智驾实时性讨论
    第一篇：鸟瞰 autoware：https://blog.csdn.net/cy1641395022/article/details/139936282
    第二篇，在 ubuntu22.04 + ros2 humble 安装 autoware.universe：https://blog.csdn.net/cy1641395022/article/details/140232957
    第三篇，智驾技术务虚会之智驾技术栈讨论：https://blog.csdn.net/cy1641395022/article/details/140278524
    第四篇，智驾技术务虚会之智驾安全性讨论：https://blog.csdn.net/cy1641395022/article/details/140332393
    第五篇：智驾实时性讨论：https://blog.csdn.net/cy1641395022/article/details/140539669


    Ros2 实时性编程实践系列 -- 倒立摆 Pendulum：https://blog.csdn.net/cy1641395022/article/details/140839803
        第一篇：倒立摆引入与 ros2 pendulum 仿真：https://blog.csdn.net/cy1641395022/article/details/140707899
        第二篇：ros2 lifecycle node：https://blog.csdn.net/cy1641395022/article/details/140707833
        第三篇：PID 控制原理与编码实现：https://blog.csdn.net/cy1641395022/article/details/140708028
        第四篇：倒立摆数学原理分析：https://blog.csdn.net/cy1641395022/article/details/140707955
    
第五篇 -- 基于 ros2 重新实现倒立摆仿真


ros2 倒立摆：https://blog.csdn.net/cy1641395022/article/details/140707899
    
    
    
思路：把之前ros2 的博客过一遍，回忆下ros2编程
    
    
思路更新：先原样抄一遍    
    
    
思路：写新的样例之前，先找找之前的博客，找一个基础demo作为起点
    




    
    
mkdir -p ~/colcon_ws/src
cd ~/colcon_ws/src
git clone https://github.com/Jieshoudaxue/pendulum.git -b rolling
cd ~/colcon_ws
colcon build --packages-select pendulum pendulum2_msgs pendulum_utils pendulum_controller pendulum_driver pendulum_state_publisher pendulum_demo pendulum_bringup

    
ros2 launch pendulum_bringup pendulum_bringup.launch.py rviz:=True




ros2 pkg create --build-type ament_cmake  --license Apache-2.0 pendulum_msg

ros2 pkg create --build-type ament_cmake --license Apache-2.0 pendulum_driver
ros2 pkg create --build-type ament_cmake --license Apache-2.0 pendulum_controller

ros2 pkg create --build-type ament_cmake --license Apache-2.0 pendulum_starter

cd /home/ycao/ros2_ads/code_space
colcon build --packages-select pendulum_driver pendulum_msg

colcon build --packages-select pendulum_controller pendulum_msg

ros2 run pendulum_driver pendulum_driver_node

ros2 run pendulum_controller pendulum_controller_node

ros2 topic pub -1 /teleop pendulum2_msgs/msg/PendulumTeleop "cart_position: 5.0"





echo "alias source_colcon='source install/local_setup.bash" >> ~/.bashrc



colcon build --packages-select pendulum_starter pendulum_driver pendulum_controller pendulum_msg


TODO（时间待定）：研究 Runge Kutta 求解微分方程的原理，并利用 Runge Kutta 求解简化后的倒立摆动力学方程
简化后的倒立摆动力学方程：https://blog.csdn.net/cy1641395022/article/details/140707955
// Runge Kutta method: 
// https://www.cnblogs.com/neoLin/p/10999688.html
// https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods

review后的思路：
    第一，一阶常微分方程，指的是类似dy/dx = f(x, y)，方程的解是一个方程，而不是数，即y = f(x)，给出一个x，可得到对应的y值。
    第二，二阶常微分方程，指的是类似 y'' = f(x, y, y')，方程的解是y = f(x)。
    第三，倒立摆的动力学方程可以转化为两个二阶常微分方程，即：
            小车加速度： x'' = f(t, x, x')
            摆杆角加速度：φ'' = f(t, φ, φ')
        四阶Runge-Kutta方法通常用于求解一阶常微分方程，如果用于求解二阶常微分方程，则把二阶转为两个一阶，最终会得到下面四个输出值，即：
            小车速度: x' = v
            小车加速度：x'' = f(t, x, x')
            摆杆角速度：φ' = w
            摆杆角加速度：φ'' = f(t, φ, φ')
    第一，整个倒立摆样例的思路是，控制器发出水平力作为倒立摆的唯一输入；驱动器接受力，根据动力学方程，求得下一时刻小车位置，速度，摆杆角度，角速度（因为他们都是时间的函数），求得的方法就是用四阶Runge-Kutta的方法求解两个二阶常微分方程，最终可得到四个输出值，作为倒立摆的状态值，反馈给控制器



